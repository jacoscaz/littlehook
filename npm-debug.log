0 info it worked if it ends with ok
1 verbose cli [ '/Users/jacopo/.nvm/versions/io.js/v1.0.3/bin/iojs',
1 verbose cli   '/Users/jacopo/.nvm/versions/io.js/v1.0.3/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--force' ]
2 info using npm@2.2.0
3 info using node@v1.0.3
4 warn using --force I sure hope you know what you are doing.
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/Users/jacopo/Code/littlehook',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory /Users/jacopo/.npm/littlehook/0.0.2/package.tgz not in flight; packing
10 verbose tar pack [ '/Users/jacopo/.npm/littlehook/0.0.2/package.tgz',
10 verbose tar pack   '/Users/jacopo/Code/littlehook' ]
11 verbose tarball /Users/jacopo/.npm/littlehook/0.0.2/package.tgz
12 verbose folder /Users/jacopo/Code/littlehook
13 info prepublish littlehook@0.0.2
14 verbose addLocalTarball adding from inside cache /Users/jacopo/.npm/littlehook/0.0.2/package.tgz
15 silly cache afterAdd littlehook@0.0.2
16 verbose afterAdd /Users/jacopo/.npm/littlehook/0.0.2/package/package.json not in flight; writing
17 verbose afterAdd /Users/jacopo/.npm/littlehook/0.0.2/package/package.json written
18 silly publish { name: 'littlehook',
18 silly publish   version: '0.0.2',
18 silly publish   description: 'A lan-wide EventEmitter2 implementation supporting complete decentralization, auto-discovery and request-response emulation.',
18 silly publish   main: './index.js',
18 silly publish   author: { name: 'Jacopo Scazzosi', email: 'me@jacoscaz.com' },
18 silly publish   keywords:
18 silly publish    [ 'auto',
18 silly publish      'discovery',
18 silly publish      'decentralized',
18 silly publish      'p2p',
18 silly publish      'eventemitter',
18 silly publish      'mdns' ],
18 silly publish   repository: { type: 'git', url: 'https://github.com/jacoscaz/littlehook' },
18 silly publish   dependencies:
18 silly publish    { eventemitter2: '>= 0.4.x',
18 silly publish      nssocket: '>= 0.3.x',
18 silly publish      mdns: '>= 0.0.7',
18 silly publish      underscore: '>= 1.4.0' },
18 silly publish   license: 'MIT',
18 silly publish   engines: { node: '>=0.6' },
18 silly publish   readme: 'littlehook\n==========\n\nlittlehook is a lan-wide, distributed EventEmitter2 implementation supporting complete decentralization, auto-discovery  &amp; request-response emulation, powered by MDNS.\n\nWhat does it do\n---------------\n\nInspired by [Hook.io](https://github.com/hookio/hook.io) and [Tinyhook](https://github.com/sergeyksv/tinyhook), littlehook provides lightweight, namespaced and fully-decentralized eventing in a "[pure p2p](http://en.wikipedia.org/wiki/Peer-to-peer#Unstructured_systems)" fashion. Littlehook is a distributed implementation of [EventEmitter2](https://github.com/hij1nx/EventEmitter2).\n\nEach hook uses [MDNS](https://github.com/agnat/node_mdns) in a store-sub fashion to discover its peers, monitor their subscriptions and publish his own subscriptions. [NsSocket](https://github.com/nodejitsu/nssocket) and [EventEmitter2](https://github.com/hij1nx/EventEmitter2) are used to push events to the appropriate listener hooks. Each hook is free to fail without compromising the rest of its peers or the network (no meshes, no trees). Request-response emulation is provided.\n\nStatus\n------\n\nPre-alpha and don\'t even think about using this in production - otherwise working pretty well.\n\nThis is an updated version of the original package, one of my very first coding experiments with Node.js. I decided to clean it up a bit, improve it in some areas and put it back online after the original, unmaintained version that I thought I had removed long ago from both NPM and GitHub surprisingly sparked some interest around Jan 2013.\n\nAt the moment, I\'m not maintaining and/or improving this package. Should it keep gathering attention, though, I\'ll think about a serious makeover.\n\nTo-Do\n-----\n\n* Socket timeout and takedown\n* P2P event flooding for large networks\n\nUsage & API\n-----------\n\n    var Hook = require(\'littlehook\'); \n    \n    var a = new Hook({ name: \'a\', port: 9999 });\n    var b = new Hook({ name: \'b\', port: 9998 });\n    \n    // Matches events of type \'event::type\' sent by \n    // any hook in the same MDNS area\n    a.on([\'*\', \'event\', \'type\'], function(data) {\n        console.log(\'data: \' + data);\n        console.log(\'sender: \' + this.event[0]);\n    });\n    \n    // This does the same as the above w/ events\n    // specified as strings instead of arrays\n    a.on(\'*::event::type\', function(data) {\n        console.log(\'data: \' + data);\n        console.log(\'sender: \' + this.event.split(\'::\')[0]);\n    });\n    \n    // When hook \'a\' comes online, emits event of\n    // type \'event::type\' - the resulting event will\n    // be namespaced as \'b::event::type\'\n    b.on([\'a\', \'up\'], function() {\n        b.emit([\'event\', \'type\'], { some: \'data\' });\n    });\n    \n    a.start();\n    b.start();\n\nEach hook is an EventEmitter2 instance, see the [relative API specs](https://github.com/hij1nx/EventEmitter2#api). \n\nEvents are namespaced as in [Tinyhook](https://github.com/sergeyksv/tinyhook) and [Hook.io](https://github.com/hookio/hook.io).\n\n    var hook = new Hook({name: \'johnny\', port: 9999});\n    hook.emit(\'hello\'); // Event emitted: [\'johnny\', \'hello\']\n\nThe delimiter used is always \'::\' (see EventEmitter2\'s specs):\n\n    \'hookName::event::type\'   <->   [\'hookName\', \'event\', \'type\'] \n\nEach hook emits the following events:\n\n    [\'hookName\', \'up\']     -> Hook \'hookName\' came up\n    [\'hookName\', \'down\']   -> Hook \'hookName\' went down\n    [\'hookName\', \'update\'] -> Hook \'hookName\' updated its subscriptions\n\nIn addition, each hook provides the following request-response methods:\n\n    // Type-based response mechanism\n    hook.respond(\'senderHook::request::type\', handler(reqData, reply){\n    \tvar requestEvent = this.event;\n        reply(\'response::type\', \'response data\');\n    });\n    \n    // Make a request\n    hook.request(\n        \'targetHook::request::type\', \n        \'request data\',\n        function(responseData){\n        \tvar responseEvent = this.event;\n            // Do smthg for each request\n        },\n        1000, // Timeout interval\n        function(){\n        \t// Do smthg after the timeout\n        }\n    );\n    \n    // Stop\n    hook.stopResponding(\'request::type\');\n\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: 'ed461db77cc514bc6397d4f99ea4de4fb2abb6f1',
18 silly publish   bugs: { url: 'https://github.com/jacoscaz/littlehook/issues' },
18 silly publish   homepage: 'https://github.com/jacoscaz/littlehook',
18 silly publish   _id: 'littlehook@0.0.2',
18 silly publish   scripts: {},
18 silly publish   _shasum: '49baa96d4e09710585dafd7723dae88d970085f6',
18 silly publish   _from: '.' }
19 silly mapToRegistry name littlehook
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/littlehook
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/jacopo/.npm/littlehook/0.0.2/package.tgz
25 verbose request uri https://registry.npmjs.org/littlehook
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 00:23:56
28 verbose request id b0ab85836d072a58
29 http request PUT https://registry.npmjs.org/littlehook
30 http 403 https://registry.npmjs.org/littlehook
31 verbose headers { date: 'Mon, 26 Jan 2015 00:23:38 GMT',
31 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
31 verbose headers   'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=60',
31 verbose headers   'content-length': '12654',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   'x-served-by': 'cache-lcy1134-LCY',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1422231817.493310,VS0,VE748',
31 verbose headers   connection: 'close' }
32 verbose request invalidating /Users/jacopo/.npm/registry.npmjs.org/littlehook on PUT
33 error publish Failed PUT 403
34 verbose stack Error: forbidden cannot modify pre-existing version: 0.0.2
34 verbose stack old={"name":"littlehook","version":"0.0.2","description":"A lan-wide EventEmitter2 implementation supporting complete decentralization, auto-discovery and request-response emulation.","main":"./index.js","author":{"name":"Jacopo Scazzosi","email":"github@jacoscaz.com"},"keywords":["auto","discovery","decentralized","p2p","eventemitter","mdns"],"repository":{"type":"git","url":"https://github.com/jacoscaz/littlehook"},"dependencies":{"eventemitter2":">= 0.4.x","nssocket":">= 0.3.x","mdns":">= 0.0.7","underscore":">= 1.4.0"},"license":"MIT","engines":{"node":">=0.6"},"readme":"littlehook\u000d\u000a==========\u000d\u000a\u000d\u000alittlehook is a lan-wide, distributed EventEmitter2 implementation supporting complete decentralization, auto-discovery  &amp; request-response emulation, powered by MDNS.\u000d\u000a\u000d\u000aWhat does it do\u000d\u000a---------------\u000d\u000a\u000d\u000aInspired by [Hook.io](https://github.com/hookio/hook.io) and [Tinyhook](https://github.com/sergeyksv/tinyhook), littlehook provides lightweight, namespaced and fully-decentralized eventing in a \"[pure p2p](http://en.wikipedia.org/wiki/Peer-to-peer#Unstructured_systems)\" fashion. Littlehook is a distributed implementation of [EventEmitter2](https://github.com/hij1nx/EventEmitter2).\u000d\u000a\u000d\u000aEach hook uses [MDNS](https://github.com/agnat/node_mdns) in a store-sub fashion to discover its peers, monitor their subscriptions and publish his own subscriptions. [NsSocket](https://github.com/nodejitsu/nssocket) and [EventEmitter2](https://github.com/hij1nx/EventEmitter2) are used to push events to the appropriate listener hooks. Each hook is free to fail without compromising the rest of its peers or the network (no meshes, no trees). Request-response emulation is provided.\u000d\u000a\u000d\u000aStatus\u000d\u000a------\u000d\u000a\u000d\u000aPre-alpha and don't even think about using this in production - otherwise working pretty well.\u000d\u000a\u000d\u000aThis is an updated version of the original package, one of my very first coding experiments with Node.js. I decided to clean it up a bit, improve it in some areas and put it back online after the original, unmaintained version that I thought I had removed long ago from both NPM and GitHub surprisingly sparked some interest around Jan 2013.\u000d\u000a\u000d\u000aAt the moment, I'm not maintaining and/or improving this package. Should it keep gathering attention, though, I'll think about a serious makeover.\u000d\u000a\u000d\u000aTo-Do\u000d\u000a-----\u000d\u000a\u000d\u000a* Socket timeout and takedown\u000d\u000a* P2P event flooding for large networks\u000d\u000a\u000d\u000aUsage & API\u000d\u000a-----------\u000d\u000a\u000d\u000a    var Hook = require('littlehook'); \u000d\u000a    \u000d\u000a    var a = new Hook({ name: 'a', port: 9999 });\u000d\u000a    var b = new Hook({ name: 'b', port: 9998 });\u000d\u000a    \u000d\u000a    // Matches events of type 'event::type' sent by \u000d\u000a    // any hook in the same MDNS area\u000d\u000a    a.on(['*', 'event', 'type'], function(data) {\u000d\u000a        console.log('data: ' + data);\u000d\u000a        console.log('sender: ' + this.event[0]);\u000d\u000a    });\u000d\u000a    \u000d\u000a    // This does the same as the above w/ events\u000d\u000a    // specified as strings instead of arrays\u000d\u000a    a.on('*::event::type', function(data) {\u000d\u000a        console.log('data: ' + data);\u000d\u000a        console.log('sender: ' + this.event.split('::')[0]);\u000d\u000a    });\u000d\u000a    \u000d\u000a    // When hook 'a' comes online, emits event of\u000d\u000a    // type 'event::type' - the resulting event will\u000d\u000a    // be namespaced as 'b::event::type'\u000d\u000a    b.on(['a', 'up'], function() {\u000d\u000a        b.emit(['event', 'type'], { some: 'data' });\u000d\u000a    });\u000d\u000a    \u000d\u000a    a.start();\u000d\u000a    b.start();\u000d\u000a\u000d\u000aEach hook is an EventEmitter2 instance, see the [relative API specs](https://github.com/hij1nx/EventEmitter2#api). \u000d\u000a\u000d\u000aEvents are namespaced as in [Tinyhook](https://github.com/sergeyksv/tinyhook) and [Hook.io](https://github.com/hookio/hook.io).\u000d\u000a\u000d\u000a    var hook = new Hook({name: 'johnny', port: 9999});\u000d\u000a    hook.emit('hello'); // Event emitted: ['johnny', 'hello']\u000d\u000a\u000d\u000aThe delimiter used is always '::' (see EventEmitter2's specs):\u000d\u000a\u000d\u000a    'hookName::event::type'   <->   ['hookName', 'event', 'type'] \u000d\u000a\u000d\u000aEach hook emits the following events:\u000d\u000a\u000d\u000a    ['hookName', 'up']     -> Hook 'hookName' came up\u000d\u000a    ['hookName', 'down']   -> Hook 'hookName' went down\u000d\u000a    ['hookName', 'update'] -> Hook 'hookName' updated its subscriptions\u000d\u000a\u000d\u000aIn addition, each hook provides the following request-response methods:\u000d\u000a\u000d\u000a    // Type-based response mechanism\u000d\u000a    hook.respond('senderHook::request::type', handler(reqData, reply){\u000d\u000a    \u0009var requestEvent = this.event;\u000d\u000a        reply('response::type', 'response data');\u000d\u000a    });\u000d\u000a    \u000d\u000a    // Make a request\u000d\u000a    hook.request(\u000d\u000a        'targetHook::request::type', \u000d\u000a        'request data',\u000d\u000a        function(responseData){\u000d\u000a        \u0009var responseEvent = this.event;\u000d\u000a            // Do smthg for each request\u000d\u000a        },\u000d\u000a        1000, // Timeout interval\u000d\u000a        function(){\u000d\u000a        \u0009// Do smthg after the timeout\u000d\u000a        }\u000d\u000a    );\u000d\u000a    \u000d\u000a    // Stop\u000d\u000a    hook.stopResponding('request::type');\u000d\u000a\u000d\u000a","readmeFilename":"README.md","_id":"littlehook@0.0.2","dist":{"shasum":"52ffadb8ad348b716d80e8e7fd38dc6175bcd98d","tarball":"http://registry.npmjs.org/littlehook/-/littlehook-0.0.2.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"jacoscaz","email":"npm@jacoscaz.com"},"maintainers":[{"name":"jacoscaz","email":"npm@jacoscaz.com"}]}
34 verbose stack new={"name":"littlehook","version":"0.0.2","description":"A lan-wide EventEmitter2 implementation supporting complete decentralization, auto-discovery and request-response emulation.","main":"./index.js","author":{"name":"Jacopo Scazzosi","email":"me@jacoscaz.com"},"keywords":["auto","discovery","decentralized","p2p","eventemitter","mdns"],"repository":{"type":"git","url":"https://github.com/jacoscaz/littlehook"},"dependencies":{"eventemitter2":">= 0.4.x","nssocket":">= 0.3.x","mdns":">= 0.0.7","underscore":">= 1.4.0"},"license":"MIT","engines":{"node":">=0.6"},"readme":"littlehook\u000a==========\u000a\u000alittlehook is a lan-wide, distributed EventEmitter2 implementation supporting complete decentralization, auto-discovery  &amp; request-response emulation, powered by MDNS.\u000a\u000aWhat does it do\u000a---------------\u000a\u000aInspired by [Hook.io](https://github.com/hookio/hook.io) and [Tinyhook](https://github.com/sergeyksv/tinyhook), littlehook provides lightweight, namespaced and fully-decentralized eventing in a \"[pure p2p](http://en.wikipedia.org/wiki/Peer-to-peer#Unstructured_systems)\" fashion. Littlehook is a distributed implementation of [EventEmitter2](https://github.com/hij1nx/EventEmitter2).\u000a\u000aEach hook uses [MDNS](https://github.com/agnat/node_mdns) in a store-sub fashion to discover its peers, monitor their subscriptions and publish his own subscriptions. [NsSocket](https://github.com/nodejitsu/nssocket) and [EventEmitter2](https://github.com/hij1nx/EventEmitter2) are used to push events to the appropriate listener hooks. Each hook is free to fail without compromising the rest of its peers or the network (no meshes, no trees). Request-response emulation is provided.\u000a\u000aStatus\u000a------\u000a\u000aPre-alpha and don't even think about using this in production - otherwise working pretty well.\u000a\u000aThis is an updated version of the original package, one of my very first coding experiments with Node.js. I decided to clean it up a bit, improve it in some areas and put it back online after the original, unmaintained version that I thought I had removed long ago from both NPM and GitHub surprisingly sparked some interest around Jan 2013.\u000a\u000aAt the moment, I'm not maintaining and/or improving this package. Should it keep gathering attention, though, I'll think about a serious makeover.\u000a\u000aTo-Do\u000a-----\u000a\u000a* Socket timeout and takedown\u000a* P2P event flooding for large networks\u000a\u000aUsage & API\u000a-----------\u000a\u000a    var Hook = require('littlehook'); \u000a    \u000a    var a = new Hook({ name: 'a', port: 9999 });\u000a    var b = new Hook({ name: 'b', port: 9998 });\u000a    \u000a    // Matches events of type 'event::type' sent by \u000a    // any hook in the same MDNS area\u000a    a.on(['*', 'event', 'type'], function(data) {\u000a        console.log('data: ' + data);\u000a        console.log('sender: ' + this.event[0]);\u000a    });\u000a    \u000a    // This does the same as the above w/ events\u000a    // specified as strings instead of arrays\u000a    a.on('*::event::type', function(data) {\u000a        console.log('data: ' + data);\u000a        console.log('sender: ' + this.event.split('::')[0]);\u000a    });\u000a    \u000a    // When hook 'a' comes online, emits event of\u000a    // type 'event::type' - the resulting event will\u000a    // be namespaced as 'b::event::type'\u000a    b.on(['a', 'up'], function() {\u000a        b.emit(['event', 'type'], { some: 'data' });\u000a    });\u000a    \u000a    a.start();\u000a    b.start();\u000a\u000aEach hook is an EventEmitter2 instance, see the [relative API specs](https://github.com/hij1nx/EventEmitter2#api). \u000a\u000aEvents are namespaced as in [Tinyhook](https://github.com/sergeyksv/tinyhook) and [Hook.io](https://github.com/hookio/hook.io).\u000a\u000a    var hook = new Hook({name: 'johnny', port: 9999});\u000a    hook.emit('hello'); // Event emitted: ['johnny', 'hello']\u000a\u000aThe delimiter used is always '::' (see EventEmitter2's specs):\u000a\u000a    'hookName::event::type'   <->   ['hookName', 'event', 'type'] \u000a\u000aEach hook emits the following events:\u000a\u000a    ['hookName', 'up']     -> Hook 'hookName' came up\u000a    ['hookName', 'down']   -> Hook 'hookName' went down\u000a    ['hookName', 'update'] -> Hook 'hookName' updated its subscriptions\u000a\u000aIn addition, each hook provides the following request-response methods:\u000a\u000a    // Type-based response mechanism\u000a    hook.respond('senderHook::request::type', handler(reqData, reply){\u000a    \u0009var requestEvent = this.event;\u000a        reply('response::type', 'response data');\u000a    });\u000a    \u000a    // Make a request\u000a    hook.request(\u000a        'targetHook::request::type', \u000a        'request data',\u000a        function(responseData){\u000a        \u0009var responseEvent = this.event;\u000a            // Do smthg for each request\u000a        },\u000a        1000, // Timeout interval\u000a        function(){\u000a        \u0009// Do smthg after the timeout\u000a        }\u000a    );\u000a    \u000a    // Stop\u000a    hook.stopResponding('request::type');\u000a\u000a","readmeFilename":"README.md","gitHead":"ed461db77cc514bc6397d4f99ea4de4fb2abb6f1","bugs":{"url":"https://github.com/jacoscaz/littlehook/issues"},"homepage":"https://github.com/jacoscaz/littlehook","_id":"littlehook@0.0.2","scripts":{},"_shasum":"49baa96d4e09710585dafd7723dae88d970085f6","_from":".","_npmVersion":"2.2.0","_nodeVersion":"1.0.3","_npmUser":{"name":"jacoscaz","email":"me@jacoscaz.com"},"maintainers":[{"name":"jacoscaz","email":"me@jacoscaz.com"}],"dist":{"shasum":"49baa96d4e09710585dafd7723dae88d970085f6","tarball":"http://registry.npmjs.org/littlehook/-/littlehook-0.0.2.tgz"}}: littlehook
34 verbose stack     at CachingRegistryClient.<anonymous> (/Users/jacopo/.nvm/versions/io.js/v1.0.3/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:244:14)
34 verbose stack     at Request._callback (/Users/jacopo/.nvm/versions/io.js/v1.0.3/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
34 verbose stack     at Request.self.callback (/Users/jacopo/.nvm/versions/io.js/v1.0.3/lib/node_modules/npm/node_modules/request/request.js:373:22)
34 verbose stack     at Request.emit (events.js:98:17)
34 verbose stack     at Request.<anonymous> (/Users/jacopo/.nvm/versions/io.js/v1.0.3/lib/node_modules/npm/node_modules/request/request.js:1318:14)
34 verbose stack     at Request.emit (events.js:117:20)
34 verbose stack     at IncomingMessage.<anonymous> (/Users/jacopo/.nvm/versions/io.js/v1.0.3/lib/node_modules/npm/node_modules/request/request.js:1266:12)
34 verbose stack     at IncomingMessage.emit (events.js:117:20)
34 verbose stack     at _stream_readable.js:888:16
34 verbose stack     at process._tickCallback (node.js:337:11)
35 verbose statusCode 403
36 verbose pkgid littlehook
37 verbose cwd /Users/jacopo/Code/littlehook
38 error Darwin 14.0.0
39 error argv "/Users/jacopo/.nvm/versions/io.js/v1.0.3/bin/iojs" "/Users/jacopo/.nvm/versions/io.js/v1.0.3/bin/npm" "publish" "--force"
40 error node v1.0.3
41 error npm  v2.2.0
42 error code E403
43 error forbidden cannot modify pre-existing version: 0.0.2
43 error old={"name":"littlehook","version":"0.0.2","description":"A lan-wide EventEmitter2 implementation supporting complete decentralization, auto-discovery and request-response emulation.","main":"./index.js","author":{"name":"Jacopo Scazzosi","email":"github@jacoscaz.com"},"keywords":["auto","discovery","decentralized","p2p","eventemitter","mdns"],"repository":{"type":"git","url":"https://github.com/jacoscaz/littlehook"},"dependencies":{"eventemitter2":">= 0.4.x","nssocket":">= 0.3.x","mdns":">= 0.0.7","underscore":">= 1.4.0"},"license":"MIT","engines":{"node":">=0.6"},"readme":"littlehook\u000d\u000a==========\u000d\u000a\u000d\u000alittlehook is a lan-wide, distributed EventEmitter2 implementation supporting complete decentralization, auto-discovery  &amp; request-response emulation, powered by MDNS.\u000d\u000a\u000d\u000aWhat does it do\u000d\u000a---------------\u000d\u000a\u000d\u000aInspired by [Hook.io](https://github.com/hookio/hook.io) and [Tinyhook](https://github.com/sergeyksv/tinyhook), littlehook provides lightweight, namespaced and fully-decentralized eventing in a \"[pure p2p](http://en.wikipedia.org/wiki/Peer-to-peer#Unstructured_systems)\" fashion. Littlehook is a distributed implementation of [EventEmitter2](https://github.com/hij1nx/EventEmitter2).\u000d\u000a\u000d\u000aEach hook uses [MDNS](https://github.com/agnat/node_mdns) in a store-sub fashion to discover its peers, monitor their subscriptions and publish his own subscriptions. [NsSocket](https://github.com/nodejitsu/nssocket) and [EventEmitter2](https://github.com/hij1nx/EventEmitter2) are used to push events to the appropriate listener hooks. Each hook is free to fail without compromising the rest of its peers or the network (no meshes, no trees). Request-response emulation is provided.\u000d\u000a\u000d\u000aStatus\u000d\u000a------\u000d\u000a\u000d\u000aPre-alpha and don't even think about using this in production - otherwise working pretty well.\u000d\u000a\u000d\u000aThis is an updated version of the original package, one of my very first coding experiments with Node.js. I decided to clean it up a bit, improve it in some areas and put it back online after the original, unmaintained version that I thought I had removed long ago from both NPM and GitHub surprisingly sparked some interest around Jan 2013.\u000d\u000a\u000d\u000aAt the moment, I'm not maintaining and/or improving this package. Should it keep gathering attention, though, I'll think about a serious makeover.\u000d\u000a\u000d\u000aTo-Do\u000d\u000a-----\u000d\u000a\u000d\u000a* Socket timeout and takedown\u000d\u000a* P2P event flooding for large networks\u000d\u000a\u000d\u000aUsage & API\u000d\u000a-----------\u000d\u000a\u000d\u000a    var Hook = require('littlehook'); \u000d\u000a    \u000d\u000a    var a = new Hook({ name: 'a', port: 9999 });\u000d\u000a    var b = new Hook({ name: 'b', port: 9998 });\u000d\u000a    \u000d\u000a    // Matches events of type 'event::type' sent by \u000d\u000a    // any hook in the same MDNS area\u000d\u000a    a.on(['*', 'event', 'type'], function(data) {\u000d\u000a        console.log('data: ' + data);\u000d\u000a        console.log('sender: ' + this.event[0]);\u000d\u000a    });\u000d\u000a    \u000d\u000a    // This does the same as the above w/ events\u000d\u000a    // specified as strings instead of arrays\u000d\u000a    a.on('*::event::type', function(data) {\u000d\u000a        console.log('data: ' + data);\u000d\u000a        console.log('sender: ' + this.event.split('::')[0]);\u000d\u000a    });\u000d\u000a    \u000d\u000a    // When hook 'a' comes online, emits event of\u000d\u000a    // type 'event::type' - the resulting event will\u000d\u000a    // be namespaced as 'b::event::type'\u000d\u000a    b.on(['a', 'up'], function() {\u000d\u000a        b.emit(['event', 'type'], { some: 'data' });\u000d\u000a    });\u000d\u000a    \u000d\u000a    a.start();\u000d\u000a    b.start();\u000d\u000a\u000d\u000aEach hook is an EventEmitter2 instance, see the [relative API specs](https://github.com/hij1nx/EventEmitter2#api). \u000d\u000a\u000d\u000aEvents are namespaced as in [Tinyhook](https://github.com/sergeyksv/tinyhook) and [Hook.io](https://github.com/hookio/hook.io).\u000d\u000a\u000d\u000a    var hook = new Hook({name: 'johnny', port: 9999});\u000d\u000a    hook.emit('hello'); // Event emitted: ['johnny', 'hello']\u000d\u000a\u000d\u000aThe delimiter used is always '::' (see EventEmitter2's specs):\u000d\u000a\u000d\u000a    'hookName::event::type'   <->   ['hookName', 'event', 'type'] \u000d\u000a\u000d\u000aEach hook emits the following events:\u000d\u000a\u000d\u000a    ['hookName', 'up']     -> Hook 'hookName' came up\u000d\u000a    ['hookName', 'down']   -> Hook 'hookName' went down\u000d\u000a    ['hookName', 'update'] -> Hook 'hookName' updated its subscriptions\u000d\u000a\u000d\u000aIn addition, each hook provides the following request-response methods:\u000d\u000a\u000d\u000a    // Type-based response mechanism\u000d\u000a    hook.respond('senderHook::request::type', handler(reqData, reply){\u000d\u000a    \u0009var requestEvent = this.event;\u000d\u000a        reply('response::type', 'response data');\u000d\u000a    });\u000d\u000a    \u000d\u000a    // Make a request\u000d\u000a    hook.request(\u000d\u000a        'targetHook::request::type', \u000d\u000a        'request data',\u000d\u000a        function(responseData){\u000d\u000a        \u0009var responseEvent = this.event;\u000d\u000a            // Do smthg for each request\u000d\u000a        },\u000d\u000a        1000, // Timeout interval\u000d\u000a        function(){\u000d\u000a        \u0009// Do smthg after the timeout\u000d\u000a        }\u000d\u000a    );\u000d\u000a    \u000d\u000a    // Stop\u000d\u000a    hook.stopResponding('request::type');\u000d\u000a\u000d\u000a","readmeFilename":"README.md","_id":"littlehook@0.0.2","dist":{"shasum":"52ffadb8ad348b716d80e8e7fd38dc6175bcd98d","tarball":"http://registry.npmjs.org/littlehook/-/littlehook-0.0.2.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"jacoscaz","email":"npm@jacoscaz.com"},"maintainers":[{"name":"jacoscaz","email":"npm@jacoscaz.com"}]}
43 error new={"name":"littlehook","version":"0.0.2","description":"A lan-wide EventEmitter2 implementation supporting complete decentralization, auto-discovery and request-response emulation.","main":"./index.js","author":{"name":"Jacopo Scazzosi","email":"me@jacoscaz.com"},"keywords":["auto","discovery","decentralized","p2p","eventemitter","mdns"],"repository":{"type":"git","url":"https://github.com/jacoscaz/littlehook"},"dependencies":{"eventemitter2":">= 0.4.x","nssocket":">= 0.3.x","mdns":">= 0.0.7","underscore":">= 1.4.0"},"license":"MIT","engines":{"node":">=0.6"},"readme":"littlehook\u000a==========\u000a\u000alittlehook is a lan-wide, distributed EventEmitter2 implementation supporting complete decentralization, auto-discovery  &amp; request-response emulation, powered by MDNS.\u000a\u000aWhat does it do\u000a---------------\u000a\u000aInspired by [Hook.io](https://github.com/hookio/hook.io) and [Tinyhook](https://github.com/sergeyksv/tinyhook), littlehook provides lightweight, namespaced and fully-decentralized eventing in a \"[pure p2p](http://en.wikipedia.org/wiki/Peer-to-peer#Unstructured_systems)\" fashion. Littlehook is a distributed implementation of [EventEmitter2](https://github.com/hij1nx/EventEmitter2).\u000a\u000aEach hook uses [MDNS](https://github.com/agnat/node_mdns) in a store-sub fashion to discover its peers, monitor their subscriptions and publish his own subscriptions. [NsSocket](https://github.com/nodejitsu/nssocket) and [EventEmitter2](https://github.com/hij1nx/EventEmitter2) are used to push events to the appropriate listener hooks. Each hook is free to fail without compromising the rest of its peers or the network (no meshes, no trees). Request-response emulation is provided.\u000a\u000aStatus\u000a------\u000a\u000aPre-alpha and don't even think about using this in production - otherwise working pretty well.\u000a\u000aThis is an updated version of the original package, one of my very first coding experiments with Node.js. I decided to clean it up a bit, improve it in some areas and put it back online after the original, unmaintained version that I thought I had removed long ago from both NPM and GitHub surprisingly sparked some interest around Jan 2013.\u000a\u000aAt the moment, I'm not maintaining and/or improving this package. Should it keep gathering attention, though, I'll think about a serious makeover.\u000a\u000aTo-Do\u000a-----\u000a\u000a* Socket timeout and takedown\u000a* P2P event flooding for large networks\u000a\u000aUsage & API\u000a-----------\u000a\u000a    var Hook = require('littlehook'); \u000a    \u000a    var a = new Hook({ name: 'a', port: 9999 });\u000a    var b = new Hook({ name: 'b', port: 9998 });\u000a    \u000a    // Matches events of type 'event::type' sent by \u000a    // any hook in the same MDNS area\u000a    a.on(['*', 'event', 'type'], function(data) {\u000a        console.log('data: ' + data);\u000a        console.log('sender: ' + this.event[0]);\u000a    });\u000a    \u000a    // This does the same as the above w/ events\u000a    // specified as strings instead of arrays\u000a    a.on('*::event::type', function(data) {\u000a        console.log('data: ' + data);\u000a        console.log('sender: ' + this.event.split('::')[0]);\u000a    });\u000a    \u000a    // When hook 'a' comes online, emits event of\u000a    // type 'event::type' - the resulting event will\u000a    // be namespaced as 'b::event::type'\u000a    b.on(['a', 'up'], function() {\u000a        b.emit(['event', 'type'], { some: 'data' });\u000a    });\u000a    \u000a    a.start();\u000a    b.start();\u000a\u000aEach hook is an EventEmitter2 instance, see the [relative API specs](https://github.com/hij1nx/EventEmitter2#api). \u000a\u000aEvents are namespaced as in [Tinyhook](https://github.com/sergeyksv/tinyhook) and [Hook.io](https://github.com/hookio/hook.io).\u000a\u000a    var hook = new Hook({name: 'johnny', port: 9999});\u000a    hook.emit('hello'); // Event emitted: ['johnny', 'hello']\u000a\u000aThe delimiter used is always '::' (see EventEmitter2's specs):\u000a\u000a    'hookName::event::type'   <->   ['hookName', 'event', 'type'] \u000a\u000aEach hook emits the following events:\u000a\u000a    ['hookName', 'up']     -> Hook 'hookName' came up\u000a    ['hookName', 'down']   -> Hook 'hookName' went down\u000a    ['hookName', 'update'] -> Hook 'hookName' updated its subscriptions\u000a\u000aIn addition, each hook provides the following request-response methods:\u000a\u000a    // Type-based response mechanism\u000a    hook.respond('senderHook::request::type', handler(reqData, reply){\u000a    \u0009var requestEvent = this.event;\u000a        reply('response::type', 'response data');\u000a    });\u000a    \u000a    // Make a request\u000a    hook.request(\u000a        'targetHook::request::type', \u000a        'request data',\u000a        function(responseData){\u000a        \u0009var responseEvent = this.event;\u000a            // Do smthg for each request\u000a        },\u000a        1000, // Timeout interval\u000a        function(){\u000a        \u0009// Do smthg after the timeout\u000a        }\u000a    );\u000a    \u000a    // Stop\u000a    hook.stopResponding('request::type');\u000a\u000a","readmeFilename":"README.md","gitHead":"ed461db77cc514bc6397d4f99ea4de4fb2abb6f1","bugs":{"url":"https://github.com/jacoscaz/littlehook/issues"},"homepage":"https://github.com/jacoscaz/littlehook","_id":"littlehook@0.0.2","scripts":{},"_shasum":"49baa96d4e09710585dafd7723dae88d970085f6","_from":".","_npmVersion":"2.2.0","_nodeVersion":"1.0.3","_npmUser":{"name":"jacoscaz","email":"me@jacoscaz.com"},"maintainers":[{"name":"jacoscaz","email":"me@jacoscaz.com"}],"dist":{"shasum":"49baa96d4e09710585dafd7723dae88d970085f6","tarball":"http://registry.npmjs.org/littlehook/-/littlehook-0.0.2.tgz"}}: littlehook
44 error If you need help, you may report this error at:
44 error     <http://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
